-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE SEQUENCE users_id_seq;

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    fullname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;

-- Table: public.conversation

-- DROP TABLE IF EXISTS public.conversation;

CREATE SEQUENCE conversation_id_seq;

CREATE TABLE IF NOT EXISTS public.conversation
(
    id integer NOT NULL DEFAULT nextval('conversation_id_seq'::regclass),
    user1_id integer NOT NULL,
    user2_id integer NOT NULL,
    CONSTRAINT conversation_pkey PRIMARY KEY (id),
    CONSTRAINT conversation_user1_id_fkey FOREIGN KEY (user1_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT conversation_user2_id_fkey FOREIGN KEY (user2_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.conversation
    OWNER to postgres;

-- Table: public.chat_group

-- DROP TABLE IF EXISTS public.chat_group;

CREATE SEQUENCE group_chat_id_seq;

CREATE TABLE IF NOT EXISTS public.chat_group
(
    id integer NOT NULL DEFAULT nextval('group_chat_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT chat_group_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.chat_group
    OWNER to postgres;

-- Table: public.group_admin

-- DROP TABLE IF EXISTS public.group_admin;
CREATE SEQUENCE group_admin_id_seq;

CREATE TABLE IF NOT EXISTS public.group_admin
(
    id integer NOT NULL DEFAULT nextval('group_admin_id_seq'::regclass),
    group_id integer NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT group_admin_pkey PRIMARY KEY (id),
    CONSTRAINT unique_group_user UNIQUE (group_id, user_id),
    CONSTRAINT fk_group FOREIGN KEY (group_id)
        REFERENCES public.chat_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT fk_user FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.group_admin
    OWNER to postgres;

-- Table: public.group_members

-- DROP TABLE IF EXISTS public.group_members;

CREATE TABLE IF NOT EXISTS public.group_members
(
    group_id integer NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT group_members_pkey PRIMARY KEY (group_id, user_id),
    CONSTRAINT group_members_group_id_fkey FOREIGN KEY (group_id)
        REFERENCES public.chat_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT group_members_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.group_members
    OWNER to postgres;

-- Table: public.message

-- DROP TABLE IF EXISTS public.message;

CREATE SEQUENCE message_id_seq;

CREATE TABLE IF NOT EXISTS public.message
(
    id integer NOT NULL DEFAULT nextval('message_id_seq'::regclass),
    conversation_id integer,
    sender_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" bigint NOT NULL,
    sender_email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    group_id integer,
    CONSTRAINT message_pkey PRIMARY KEY (id),
    CONSTRAINT message_conversation_id_fkey FOREIGN KEY (conversation_id)
        REFERENCES public.conversation (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT message_group_id_fkey FOREIGN KEY (group_id)
        REFERENCES public.chat_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT message_sender_id_fkey FOREIGN KEY (sender_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.message
    OWNER to postgres;

-- Table: public.message_image

-- DROP TABLE IF EXISTS public.message_image;

CREATE SEQUENCE message_image_id_seq;

CREATE TABLE IF NOT EXISTS public.message_image
(
    id integer NOT NULL DEFAULT nextval('message_image_id_seq'::regclass),
    url character varying(255) COLLATE pg_catalog."default" NOT NULL,
    message_id integer,
    CONSTRAINT pk_message_image PRIMARY KEY (id),
    CONSTRAINT fk_message FOREIGN KEY (message_id)
        REFERENCES public.message (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.message_image
    OWNER to postgres;

-- Table: public.audit_log

-- DROP TABLE IF EXISTS public.audit_log;

CREATE SEQUENCE audit_log_id_seq;

CREATE TABLE IF NOT EXISTS public.audit_log
(
    id integer NOT NULL DEFAULT nextval('audit_log_id_seq'::regclass),
    action character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    CONSTRAINT audit_log_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.audit_log
    OWNER to postgres;